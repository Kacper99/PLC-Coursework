-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 8 contains 1 shift/reduce conflicts.

terminal '/' is unused
terminal '*' is unused
terminal while is unused
terminal do is unused
terminal '(' is unused
terminal ')' is unused
terminal 'stream[' is unused
terminal ']' is unused
terminal print is unused
terminal println is unused
terminal '{' is unused
terminal '}' is unused
terminal '&&' is unused
terminal '||' is unused
terminal '!' is unused
terminal '!=' is unused
terminal '==' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Statements                     (0)
	Statements -> Block ';' Statements                 (1)
	Statements -> Block                                (2)
	Block -> Exp                                       (3)
	Block -> if BoolExp then Statements else Statements   (4)
	Exp -> var '=' Exp                                 (5)
	Exp -> Exp '+' Exp                                 (6)
	Exp -> Exp '-' Exp                                 (7)
	Exp -> int                                         (8)
	Exp -> var                                         (9)
	BoolExp -> Exp '<' Exp                             (10)
	BoolExp -> Exp '>' Exp                             (11)
	BoolExp -> true                                    (12)
	BoolExp -> false                                   (13)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	var            { TokenVar _ $$ }
	'+'            { TokenAdd _ }
	'-'            { TokenMinus _ }
	'/'            { TokenDiv _ }
	'*'            { TokenMul _ }
	'<'            { TokenLT _ }
	'>'            { TokenMT _ }
	'='            { TokenEq _ }
	if             { TokenIf _ }
	then           { TokenThen _ }
	else           { TokenElse _ }
	while          { TokenWhile _ }
	do             { TokenDo _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'stream['      { TokenOpenStream _ }
	']'            { TokenCloseStream _ }
	print          { TokenPrint _ }
	println        { TokenPrintLine _ }
	';'            { TokenEndStatement _ }
	'{'            { TokenLeftCurly _ }
	'}'            { TokenRightCurly _ }
	'&&'           { TokenAnd _ }
	'||'           { TokenOr _ }
	'!'            { TokenNot _ }
	'!='           { TokenNotEqual _ }
	'=='           { TokenEqual _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Statements      rules 1, 2
	Block           rules 3, 4
	Exp             rules 5, 6, 7, 8, 9
	BoolExp         rules 10, 11, 12, 13

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 4
	var            shift, and enter state 5
	if             shift, and enter state 6

	Statements     goto state 7
	Block          goto state 8
	Exp            goto state 3

State 1


	int            shift, and enter state 4
	var            shift, and enter state 5
	if             shift, and enter state 6

	Block          goto state 2
	Exp            goto state 3

State 2

	Statements -> Block . ';' Statements                (rule 1)

	';'            shift, and enter state 9


State 3

	Block -> Exp .                                      (rule 3)
	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	else           reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 4

	Exp -> int .                                        (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 5

	Exp -> var . '=' Exp                                (rule 5)
	Exp -> var .                                        (rule 9)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	'='            shift, and enter state 14
	then           reduce using rule 9
	else           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 6

	Block -> if . BoolExp then Statements else Statements    (rule 4)

	int            shift, and enter state 4
	true           shift, and enter state 12
	false          shift, and enter state 13
	var            shift, and enter state 5

	Exp            goto state 10
	BoolExp        goto state 11

State 7

	%start_parseCalc -> Statements .                    (rule 0)

	%eof           accept


State 8

	Statements -> Block . ';' Statements                (rule 1)
	Statements -> Block .                               (rule 2)

	else           reduce using rule 2
	';'            shift, and enter state 9
			(reduce using rule 2)

	%eof           reduce using rule 2


State 9

	Statements -> Block ';' . Statements                (rule 1)

	int            shift, and enter state 4
	var            shift, and enter state 5
	if             shift, and enter state 6

	Statements     goto state 23
	Block          goto state 8
	Exp            goto state 3

State 10

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)
	BoolExp -> Exp . '<' Exp                            (rule 10)
	BoolExp -> Exp . '>' Exp                            (rule 11)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	'<'            shift, and enter state 21
	'>'            shift, and enter state 22


State 11

	Block -> if BoolExp . then Statements else Statements    (rule 4)

	then           shift, and enter state 20


State 12

	BoolExp -> true .                                   (rule 12)

	then           reduce using rule 12


State 13

	BoolExp -> false .                                  (rule 13)

	then           reduce using rule 13


State 14

	Exp -> var '=' . Exp                                (rule 5)

	int            shift, and enter state 4
	var            shift, and enter state 5

	Exp            goto state 19

State 15

	Exp -> Exp '+' . Exp                                (rule 6)

	int            shift, and enter state 4
	var            shift, and enter state 5

	Exp            goto state 18

State 16

	Exp -> Exp '-' . Exp                                (rule 7)

	int            shift, and enter state 4
	var            shift, and enter state 5

	Exp            goto state 17

State 17

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)
	Exp -> Exp '-' Exp .                                (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 18

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp '+' Exp .                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 19

	Exp -> var '=' Exp .                                (rule 5)
	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 20

	Block -> if BoolExp then . Statements else Statements    (rule 4)

	int            shift, and enter state 4
	var            shift, and enter state 5
	if             shift, and enter state 6

	Statements     goto state 26
	Block          goto state 8
	Exp            goto state 3

State 21

	BoolExp -> Exp '<' . Exp                            (rule 10)

	int            shift, and enter state 4
	var            shift, and enter state 5

	Exp            goto state 25

State 22

	BoolExp -> Exp '>' . Exp                            (rule 11)

	int            shift, and enter state 4
	var            shift, and enter state 5

	Exp            goto state 24

State 23

	Statements -> Block ';' Statements .                (rule 1)

	else           reduce using rule 1
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 24

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)
	BoolExp -> Exp '>' Exp .                            (rule 11)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	then           reduce using rule 11


State 25

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 7)
	BoolExp -> Exp '<' Exp .                            (rule 10)

	'+'            shift, and enter state 15
	'-'            shift, and enter state 16
	then           reduce using rule 10


State 26

	Block -> if BoolExp then Statements . else Statements    (rule 4)

	else           shift, and enter state 27


State 27

	Block -> if BoolExp then Statements else . Statements    (rule 4)

	int            shift, and enter state 4
	var            shift, and enter state 5
	if             shift, and enter state 6

	Statements     goto state 28
	Block          goto state 8
	Exp            goto state 3

State 28

	Block -> if BoolExp then Statements else Statements .    (rule 4)

	else           reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 14
Number of terminals: 30
Number of non-terminals: 5
Number of states: 29
